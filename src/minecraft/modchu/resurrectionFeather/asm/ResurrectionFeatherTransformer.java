package modchu.resurrectionFeather.asm;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.net.URL;import java.util.Enumeration;import java.util.zip.ZipEntry;import java.util.zip.ZipFile;import net.minecraft.launchwrapper.IClassTransformer;import net.minecraft.launchwrapper.LaunchClassLoader;import net.minecraft.src.mod_ResurrectionFeather;public class ResurrectionFeatherTransformer implements IClassTransformer {	private static final String ORG_ClassName = "om";	private static final String Replace_ClassName = "om";	private boolean initFlag;	private boolean isObfuscated;	@Override	public byte[] transform(String name, String transformedName, byte[] bytes)	{		//呼ばれているのかチェックデバック用		//System.out.println("ResurrectionFeatherTransformer-transform name="+name+" transformedName="+transformedName);		if (!initFlag) {			LaunchClassLoader cl = (LaunchClassLoader)ResurrectionFeatherCorePlugin.class.getClassLoader();			try {				isObfuscated = cl.getClassBytes("net.minecraft.world.World") == null;			} catch (Exception e) {			}			initFlag = true;		}		if (name.equals(ORG_ClassName)) {			try {				//System.out.println("transform replaceClass");				return replaceClass(bytes);			} catch (IOException e) {				e.printStackTrace();			}		}		return bytes;	}	private byte[] replaceClass(byte[] bytes) throws IOException {		ZipFile zf = null;		InputStream zi = null;		try		{			try			{				String s = getClass().getSimpleName()+".class";				//System.out.println("s="+s);				URL url = this.getClass().getResource(s);				//System.out.println("url.toString()="+url.toString());				File file = new File (url.toString());				s = file.toString();				//System.out.println("s="+s);				int i = s.lastIndexOf("jar");				if (i > 1) {					s = s.substring(0, i + 3);					i = s.indexOf("jar:file:");					//System.out.println("s="+s+" i="+i);					if (i > -1) {						s = s.substring(i + 9);						//System.out.println("s="+s+" i="+i);					} else {						i = s.indexOf("jar:file:/");						s = s.substring(i + 10);						//System.out.println("s="+s+" i="+i);					}				}				zf = new ZipFile(s);				ZipEntry ze = zf.getEntry(Replace_ClassName+".class");/*				Enumeration enumeration = zf.entries();				do				{					if(!enumeration.hasMoreElements())					{						System.out.println("hasMoreElements() break");						break;					}					ze = zf.getEntry(enumeration.nextElement().toString());					String name = ze.getName();					System.out.println("replaceClass zip getName="+name);				} while(true);*/				if (ze != null)				{					//System.out.println("replaceClass ze != null");					zi = zf.getInputStream(ze);					bytes = new byte[(int) ze.getSize()];					zi.read(bytes);				} else {					//System.out.println("replaceClass ze == null !!");				}			}			catch(Exception exception)			{				exception.printStackTrace();			}			//System.out.println("replaceClass return.");			return bytes;		}		finally		{			//System.out.println("replaceClass finally");			if (zi != null)			{				zi.close();			}			if (zf != null)			{				zf.close();			}		}	}}